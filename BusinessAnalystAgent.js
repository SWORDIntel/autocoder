import path from "path";
import chalk from "chalk";
import { CONFIG } from "./config.js";
import FileManager from "./fileManager.js";
import Anthropic from "@anthropic-ai/sdk";
import UserInterface from "./userInterface.js";

const anthropic = new Anthropic({ apiKey: process.env.CLAUDE_KEY });

const BusinessAnalystAgent = {
    async run(projectStructure, readme) {
        console.log(chalk.cyan("ðŸ§  Business Analyst Agent: Analyzing requirements and providing business insights..."));

        const requirements = await this.extractRequirements(readme);
        const insights = await this.generateInsights(requirements, projectStructure);
        await this.updateProjectDocumentation(insights);
        await this.suggestFeaturePrioritization(insights);
    },

    async extractRequirements(readme) {
        const prompt = `
      Extract and list the key business requirements from the following README content:

      ${readme}

      Provide a concise list of the main business requirements.
    `;

        const response = await anthropic.messages.create({
            model: await UserInterface.getModel(),
            max_tokens: CONFIG.maxTokens,
            temperature: await UserInterface.getTemperature(),
            messages: [{ role: "user", content: prompt }],
        });

        return response.content[0].text.trim();
    },

    async generateInsights(requirements, projectStructure) {
        const prompt = `
      Analyze the following business requirements and project structure:

      Requirements:
      ${requirements}

      Project Structure:
      ${JSON.stringify(projectStructure, null, 2)}

      Provide business insights, including:
      1. Potential market opportunities
      2. Competitive advantages
      3. Risks and challenges
      4. Suggestions for improvement
    `;

        const response = await anthropic.messages.create({
            model: await UserInterface.getModel(),
            max_tokens: CONFIG.maxTokens,
            temperature: await UserInterface.getTemperature(),
            messages: [{ role: "user", content: prompt }],
        });

        return response.content[0].text.trim();
    },

    async updateProjectDocumentation(insights) {
        const docPath = path.join(process.cwd(), "docs", "business_analysis.md");
        await FileManager.createSubfolders(docPath);

        const content = `# Business Analysis Insights

${insights}

Generated by AutoCode Business Analyst Agent on ${new Date().toISOString()}
`;

        await FileManager.write(docPath, content);
        console.log(chalk.green(`âœ… Business analysis insights have been saved to ${docPath}`));
    },

    async suggestFeaturePrioritization(insights) {
        const prompt = `
      Based on the following business insights, suggest a prioritized list of features or improvements:

      ${insights}

      Provide a numbered list of the top 5 prioritized features or improvements.
    `;

        const response = await anthropic.messages.create({
            model: await UserInterface.getModel(),
            max_tokens: CONFIG.maxTokens,
            temperature: await UserInterface.getTemperature(),
            messages: [{ role: "user", content: prompt }],
        });

        const prioritizedFeatures = response.content[0].text.trim();
        const featurePath = path.join(process.cwd(), "docs", "prioritized_features.md");

        const content = `# Prioritized Features

${prioritizedFeatures}

Generated by AutoCode Business Analyst Agent on ${new Date().toISOString()}
`;

        await FileManager.write(featurePath, content);
        console.log(chalk.green(`âœ… Prioritized features have been saved to ${featurePath}`));
    },
};

export default BusinessAnalystAgent;
