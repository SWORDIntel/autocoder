import fetch from "node-fetch";
import FileManager from "./fileManager.js";
import chalk from "chalk";
import ora from "ora";

class RedditPromotionAgent {
    constructor() {
        this.subreddit = "AutoCode";
        this.apiBaseUrl = "https://oauth.reddit.com";
        this.clientId = process.env.REDDIT_CLIENT_ID;
        this.clientSecret = process.env.REDDIT_CLIENT_SECRET;
        this.username = process.env.REDDIT_USERNAME;
        this.password = process.env.REDDIT_PASSWORD;
        this.accessToken = null;
        this.tokenExpiration = null;
    }

    async initialize() {
        await this.authenticate();
    }

    async authenticate() {
        const auth = Buffer.from(`${this.clientId}:${this.clientSecret}`).toString("base64");
        const response = await fetch("https://www.reddit.com/api/v1/access_token", {
            method: "POST",
            headers: {
                Authorization: `Basic ${auth}`,
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `grant_type=password&username=${this.username}&password=${this.password}`,
        });

        const data = await response.json();
        this.accessToken = data.access_token;
        this.tokenExpiration = Date.now() + data.expires_in * 1000;
    }

    async ensureAuthenticated() {
        if (!this.accessToken || Date.now() > this.tokenExpiration) {
            await this.authenticate();
        }
    }

    async createPost(title, content) {
        await this.ensureAuthenticated();
        const response = await fetch(`${this.apiBaseUrl}/api/submit`, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${this.accessToken}`,
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `kind=self&sr=${this.subreddit}&title=${encodeURIComponent(title)}&text=${encodeURIComponent(
                content
            )}`,
        });

        return response.json();
    }

    async getTopPosts(limit = 10) {
        await this.ensureAuthenticated();
        const response = await fetch(`${this.apiBaseUrl}/r/${this.subreddit}/top?limit=${limit}`, {
            headers: {
                Authorization: `Bearer ${this.accessToken}`,
            },
        });

        return response.json();
    }

    async commentOnPost(postId, comment) {
        await this.ensureAuthenticated();
        const response = await fetch(`${this.apiBaseUrl}/api/comment`, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${this.accessToken}`,
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `api_type=json&thing_id=${postId}&text=${encodeURIComponent(comment)}`,
        });

        return response.json();
    }

    async generatePromotionalContent() {
        const readme = await FileManager.read("README.md");
        const projectStructure = await FileManager.getProjectStructure();

        const content = `
Check out AutoCode - an innovative automatic coding tool!

Features:
${readme.split("## Features")[1]?.split("##")[0]?.trim()}

Project structure:
${JSON.stringify(projectStructure, null, 2)}

Visit https://autocode.work for more information!
    `.trim();

        return content;
    }

    async runPromotionCampaign() {
        const spinner = ora("Running Reddit promotion campaign...").start();
        try {
            const content = await this.generatePromotionalContent();
            const title = "Introducing AutoCode: Your AI-Powered Coding Assistant";

            const postResult = await this.createPost(title, content);
            console.log(chalk.green("Promotional post created:", postResult));

            const topPosts = await this.getTopPosts(5);
            for (const post of topPosts.data.children) {
                const comment = "Have you tried AutoCode? It's revolutionizing how we approach coding projects!";
                const commentResult = await this.commentOnPost(post.data.name, comment);
                console.log(chalk.green("Comment added to post:", post.data.title, commentResult));
            }
            spinner.succeed("Reddit promotion campaign completed successfully");
        } catch (error) {
            spinner.fail("Reddit promotion campaign failed");
            console.error(chalk.red("Error during Reddit promotion:", error.message));
        }
    }

    async runHabrPromotion() {
        const spinner = ora("Running Habr promotion campaign...").start();
        try {
            const content = await this.generateHabrPromotionalContent();
            const title = "AutoCode: –ö–æ–≥–¥–∞ –∫–æ–¥ –ø–∏—à–µ—Ç —Å–∞–º —Å–µ–±—è, –∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ —ç—Ç–æ —Å –≤–æ–¥–∫–æ–π";

            console.log(chalk.green("Habr promotional post created:", title));
            console.log(chalk.cyan("Content:", content));

            spinner.succeed("Habr promotion campaign completed successfully");
        } catch (error) {
            spinner.fail("Habr promotion campaign failed");
            console.error(chalk.red("Error during Habr promotion:", error.message));
        }
    }

    async generateHabrPromotionalContent() {
        const readme = await FileManager.read("README.md");
        const features = readme?.split("## Features")[1].split("##")[0]?.trim();

        return `
–¢–æ–≤–∞—Ä–∏—â–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã! –£—Å—Ç–∞–ª–∏ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –±–æ—Ä—å–±—ã —Å –±–∞–≥–∞–º–∏ –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏? –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∫–æ–¥ –ø–∏—Å–∞–ª—Å—è —Å–∞–º, –ø–æ–∫–∞ –≤—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –∂–∏–∑–Ω—å—é? –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º AutoCode ‚Äì –≤–∞—à –ª–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ–¥–∞!

ü§ñ AutoCode ‚Äì —ç—Ç–æ –∫–∞–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ. –û–Ω –Ω–µ –≤–æ—Ä—á–∏—Ç, –Ω–µ –ø—å–µ—Ç –≤–∞—à –∫–æ—Ñ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏—à–∫–∏:
${features}

–î–∞, —ç—Ç–æ –∑–≤—É—á–∏—Ç –∫–∞–∫ –Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞. –ù–æ –Ω–µ—Ç, —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å, —Ç–æ–≤–∞—Ä–∏—â–∏! AutoCode ‚Äì —ç—Ç–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ñ–µ–ª–µ–∑–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ AutoCode —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Å–µ–±—è –õ–µ–≤ –¢–æ–ª—Å—Ç—ã–º –æ—Ç –º–∏—Ä–∞ –∫–æ–¥–∞. –ü—É—Å—Ç—å –≤–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏ –¥—É–º–∞—é—Ç, —á—Ç–æ –≤—ã –≥–µ–Ω–∏–π, –ø–æ–∫–∞ AI –¥–µ–ª–∞–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –∑–∞ –≤–∞—Å.

–ü–æ–º–Ω–∏—Ç–µ, –≤ –º–∏—Ä–µ –∫–æ–¥–∞, –∫–∞–∫ –∏ –≤ –†–æ—Å—Å–∏–∏ ‚Äì –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞. –ù–æ —Å AutoCode –≤—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏!

–ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ https://autocode.work –∏ –¥–∞–π—Ç–µ —à–∞–Ω—Å —Å–≤–µ—Ç–ª–æ–º—É –±—É–¥—É—â–µ–º—É. –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–µ–º–Ω–æ–º –±—É–¥—É—â–µ–º –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–≥–∏ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.
        `.trim();
    }

    async run() {
        console.log(chalk.cyan("ü§ñ Running Promotion Agent..."));
        await this.initialize();
        await this.runPromotionCampaign();
        await this.runHabrPromotion();
        console.log(chalk.green("‚úÖ Promotion Agent has completed its tasks."));
    }
}

export default new RedditPromotionAgent();
